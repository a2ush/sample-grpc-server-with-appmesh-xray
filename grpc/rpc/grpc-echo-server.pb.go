// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: grpc-echo-server.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Timezone_Format int32

const (
	Timezone_Unknown Timezone_Format = 0
	Timezone_UTC     Timezone_Format = 1
	Timezone_PST     Timezone_Format = 2
	Timezone_JST     Timezone_Format = 3
)

// Enum value maps for Timezone_Format.
var (
	Timezone_Format_name = map[int32]string{
		0: "Unknown",
		1: "UTC",
		2: "PST",
		3: "JST",
	}
	Timezone_Format_value = map[string]int32{
		"Unknown": 0,
		"UTC":     1,
		"PST":     2,
		"JST":     3,
	}
)

func (x Timezone_Format) Enum() *Timezone_Format {
	p := new(Timezone_Format)
	*p = x
	return p
}

func (x Timezone_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Timezone_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_grpc_echo_server_proto_enumTypes[0].Descriptor()
}

func (Timezone_Format) Type() protoreflect.EnumType {
	return &file_grpc_echo_server_proto_enumTypes[0]
}

func (x Timezone_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Timezone_Format.Descriptor instead.
func (Timezone_Format) EnumDescriptor() ([]byte, []int) {
	return file_grpc_echo_server_proto_rawDescGZIP(), []int{0, 0}
}

type Timezone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Timezone) Reset() {
	*x = Timezone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_echo_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timezone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timezone) ProtoMessage() {}

func (x *Timezone) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_echo_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timezone.ProtoReflect.Descriptor instead.
func (*Timezone) Descriptor() ([]byte, []int) {
	return file_grpc_echo_server_proto_rawDescGZIP(), []int{0}
}

type ClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimezoneFormat Timezone_Format `protobuf:"varint,1,opt,name=timezone_format,json=timezoneFormat,proto3,enum=rpc.Timezone_Format" json:"timezone_format,omitempty"`
}

func (x *ClientRequest) Reset() {
	*x = ClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_echo_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientRequest) ProtoMessage() {}

func (x *ClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_echo_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientRequest.ProtoReflect.Descriptor instead.
func (*ClientRequest) Descriptor() ([]byte, []int) {
	return file_grpc_echo_server_proto_rawDescGZIP(), []int{1}
}

func (x *ClientRequest) GetTimezoneFormat() Timezone_Format {
	if x != nil {
		return x.TimezoneFormat
	}
	return Timezone_Unknown
}

type ServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConvertTime string `protobuf:"bytes,1,opt,name=convert_time,json=convertTime,proto3" json:"convert_time,omitempty"`
}

func (x *ServerResponse) Reset() {
	*x = ServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_echo_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerResponse) ProtoMessage() {}

func (x *ServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_echo_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerResponse.ProtoReflect.Descriptor instead.
func (*ServerResponse) Descriptor() ([]byte, []int) {
	return file_grpc_echo_server_proto_rawDescGZIP(), []int{2}
}

func (x *ServerResponse) GetConvertTime() string {
	if x != nil {
		return x.ConvertTime
	}
	return ""
}

var File_grpc_echo_server_proto protoreflect.FileDescriptor

var file_grpc_echo_server_proto_rawDesc = []byte{
	0x0a, 0x16, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x65, 0x63, 0x68, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72, 0x70, 0x63, 0x22, 0x3c, 0x0a,
	0x08, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0x30, 0x0a, 0x06, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x55, 0x54, 0x43, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x53, 0x54,
	0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x53, 0x54, 0x10, 0x03, 0x22, 0x4e, 0x0a, 0x0d, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0f,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0e, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x33, 0x0a, 0x0e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x32, 0x46, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x12, 0x38,
	0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2f, 0x3b, 0x72,
	0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpc_echo_server_proto_rawDescOnce sync.Once
	file_grpc_echo_server_proto_rawDescData = file_grpc_echo_server_proto_rawDesc
)

func file_grpc_echo_server_proto_rawDescGZIP() []byte {
	file_grpc_echo_server_proto_rawDescOnce.Do(func() {
		file_grpc_echo_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_echo_server_proto_rawDescData)
	})
	return file_grpc_echo_server_proto_rawDescData
}

var file_grpc_echo_server_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_grpc_echo_server_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_grpc_echo_server_proto_goTypes = []interface{}{
	(Timezone_Format)(0),   // 0: rpc.Timezone.Format
	(*Timezone)(nil),       // 1: rpc.Timezone
	(*ClientRequest)(nil),  // 2: rpc.ClientRequest
	(*ServerResponse)(nil), // 3: rpc.ServerResponse
}
var file_grpc_echo_server_proto_depIdxs = []int32{
	0, // 0: rpc.ClientRequest.timezone_format:type_name -> rpc.Timezone.Format
	2, // 1: rpc.TimeManage.ConvertTime:input_type -> rpc.ClientRequest
	3, // 2: rpc.TimeManage.ConvertTime:output_type -> rpc.ServerResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_grpc_echo_server_proto_init() }
func file_grpc_echo_server_proto_init() {
	if File_grpc_echo_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_grpc_echo_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timezone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_echo_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_echo_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_echo_server_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpc_echo_server_proto_goTypes,
		DependencyIndexes: file_grpc_echo_server_proto_depIdxs,
		EnumInfos:         file_grpc_echo_server_proto_enumTypes,
		MessageInfos:      file_grpc_echo_server_proto_msgTypes,
	}.Build()
	File_grpc_echo_server_proto = out.File
	file_grpc_echo_server_proto_rawDesc = nil
	file_grpc_echo_server_proto_goTypes = nil
	file_grpc_echo_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TimeManageClient is the client API for TimeManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TimeManageClient interface {
	ConvertTime(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error)
}

type timeManageClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeManageClient(cc grpc.ClientConnInterface) TimeManageClient {
	return &timeManageClient{cc}
}

func (c *timeManageClient) ConvertTime(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/rpc.TimeManage/ConvertTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeManageServer is the server API for TimeManage service.
type TimeManageServer interface {
	ConvertTime(context.Context, *ClientRequest) (*ServerResponse, error)
}

// UnimplementedTimeManageServer can be embedded to have forward compatible implementations.
type UnimplementedTimeManageServer struct {
}

func (*UnimplementedTimeManageServer) ConvertTime(context.Context, *ClientRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertTime not implemented")
}

func RegisterTimeManageServer(s *grpc.Server, srv TimeManageServer) {
	s.RegisterService(&_TimeManage_serviceDesc, srv)
}

func _TimeManage_ConvertTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeManageServer).ConvertTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TimeManage/ConvertTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeManageServer).ConvertTime(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TimeManage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.TimeManage",
	HandlerType: (*TimeManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConvertTime",
			Handler:    _TimeManage_ConvertTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc-echo-server.proto",
}
